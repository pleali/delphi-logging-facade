# LoggingFacade Configuration - DEBUG Mode
# =========================================
# This file is loaded automatically when the application is compiled in DEBUG mode.
#
# Format: logger.name=LEVEL
#
# Available levels (from most to least verbose):
#   TRACE - Very detailed trace information
#   DEBUG - Debug information for developers
#   INFO  - General informational messages (default)
#   WARN  - Warning messages
#   ERROR - Error messages
#   FATAL - Fatal error messages
#
# Hierarchical Logging (Logback-style):
#   - Exact match has highest priority
#   - Wildcard patterns (* suffix) for broader rules
#   - Most specific rule wins
#
# Examples:
#   root=INFO                       # Root logger (fallback for all)
#   MyApp.Database=DEBUG            # Exact match for 'MyApp.Database'
#   mqtt.*=INFO                     # All loggers starting with 'mqtt.'
#   mqtt.transport.ics=TRACE        # More specific than mqtt.*
#
# Resolution order for 'mqtt.transport.ics':
#   1. mqtt.transport.ics (exact) → if not found
#   2. mqtt.transport.* (wildcard) → if not found
#   3. mqtt.* (wildcard) → if not found
#   4. root or default level

# Root logger level (fallback for all loggers)
root=DEBUG

# Example application loggers
MyApp.Main=INFO
MyApp.Database=DEBUG
MyApp.Network=DEBUG

# Example MQTT library configuration
# Verbose logging for all MQTT components
mqtt.*=DEBUG

# Extra verbose for transport layer
mqtt.transport=TRACE
mqtt.transport.ics=TRACE

# Less verbose for core components
mqtt.core=INFO

# Example hierarchical configuration
# This demonstrates how specificity works:
MyLibrary.*=WARN
MyLibrary.CriticalComponent=DEBUG
MyLibrary.CriticalComponent.SubModule=TRACE

# Performance-critical paths (reduce logging)
# MyApp.HotPath=WARN

# Comments and blank lines are ignored
