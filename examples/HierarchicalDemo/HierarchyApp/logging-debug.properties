# ================================================================================
# HIERARCHICAL LOGGING CONFIGURATION - DEBUG MODE
# ================================================================================
# This configuration demonstrates Logback-style hierarchical logging with
# wildcard patterns and specificity-based resolution.
#
# HIERARCHY RULES:
#   1. Most specific rule wins
#   2. Wildcard patterns match all children
#   3. Exact matches have priority over wildcards
#
# EXAMPLE HIERARCHY:
#   app.database.repository.orders (exact)
#     > app.database.repository.* (wildcard)
#       > app.database.* (wildcard)
#         > app.* (wildcard)
#           > root (fallback)
#
# ================================================================================

# ROOT LOGGER
# Fallback for all loggers not explicitly configured
root=INFO

# ================================================================================
# APPLICATION HIERARCHY (app.*)
# ================================================================================
# Three main layers: UI, Business, Database

# --- UI Layer (app.ui.*) ---
# Moderate logging for UI layer
app.ui.*=INFO

# Specific UI component with detailed logging
app.ui.mainform=DEBUG

# --- Business Layer (app.business.*) ---
# Detailed logging for business logic
app.business.*=DEBUG

# Even more detailed for order processing (critical component)
app.business.orderprocessor=TRACE

# --- Database Layer (app.database.*) ---
# All database operations logged at DEBUG level
app.database.*=DEBUG

# Connection management needs detailed trace logs
app.database.connection=TRACE

# Repository layer at INFO (less verbose than connection)
app.database.repository.*=INFO

# But Orders repository needs more details (critical data)
app.database.repository.orders=DEBUG

# Customers repository can stay at INFO
# app.database.repository.customers=INFO  # Commented = uses app.database.repository.* rule

# ================================================================================
# DATA PROCESSOR LIBRARY (dataprocessor.*) - FROM BPL
# ================================================================================
# Multi-level hierarchy: validation, transform (converter/mapper), export (csv/json)

# All DataProcessor components at DEBUG by default
dataprocessor.*=DEBUG

# --- Validation Layer ---
# Validation is critical, needs TRACE level
dataprocessor.validation=TRACE

# --- Transform Layer (dataprocessor.transform.*) ---
# Transform layer at INFO (less critical than validation)
dataprocessor.transform.*=INFO

# But Converter needs DEBUG (more complex transformations)
dataprocessor.transform.converter=DEBUG

# Mapper can stay at INFO (simpler operations)
# dataprocessor.transform.mapper=INFO  # Uses dataprocessor.transform.* rule

# --- Export Layer (dataprocessor.export.*) ---
# Export operations at DEBUG (need to track what's being exported)
dataprocessor.export.*=DEBUG

# CSV export needs TRACE (detailed file operations)
dataprocessor.export.csv=TRACE

# JSON export at DEBUG is sufficient
# dataprocessor.export.json=DEBUG  # Uses dataprocessor.export.* rule

# ================================================================================
# RESOLUTION EXAMPLES
# ================================================================================
# Given the configuration above, here's how different loggers resolve:
#
# Logger name                           | Resolved level | Matching rule
# --------------------------------------|----------------|--------------------------------
# app.ui.mainform                       | DEBUG          | app.ui.mainform (exact match)
# app.ui.statusbar                      | INFO           | app.ui.* (wildcard)
# app.business.orderprocessor           | TRACE          | app.business.orderprocessor (exact)
# app.business.paymentprocessor         | DEBUG          | app.business.* (wildcard)
# app.database.connection               | TRACE          | app.database.connection (exact)
# app.database.repository.orders        | DEBUG          | app.database.repository.orders (exact)
# app.database.repository.customers     | INFO           | app.database.repository.* (wildcard)
# dataprocessor.validation              | TRACE          | dataprocessor.validation (exact)
# dataprocessor.transform.converter     | DEBUG          | dataprocessor.transform.converter (exact)
# dataprocessor.transform.mapper        | INFO           | dataprocessor.transform.* (wildcard)
# dataprocessor.export.csv              | TRACE          | dataprocessor.export.csv (exact)
# dataprocessor.export.json             | DEBUG          | dataprocessor.export.* (wildcard)
# some.unconfigured.logger              | INFO           | root (fallback)
#
# ================================================================================
# TIPS FOR PRODUCTION
# ================================================================================
# For production, you typically want:
#   - root=WARN (minimal noise)
#   - Critical components=INFO or DEBUG
#   - Most wildcards=ERROR or WARN
#   - Avoid TRACE in production (performance impact)
#
# See logging.properties for production configuration example.
# ================================================================================
