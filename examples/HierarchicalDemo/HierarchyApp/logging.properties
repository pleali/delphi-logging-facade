# ================================================================================
# HIERARCHICAL LOGGING CONFIGURATION - PRODUCTION MODE
# ================================================================================
# This is the production configuration, optimized for minimal overhead
# while capturing critical information.
#
# PRODUCTION BEST PRACTICES:
#   - Use WARN or ERROR for root logger
#   - Enable INFO only for business-critical components
#   - Avoid DEBUG/TRACE (performance impact)
#   - Use wildcards to configure entire subsystems
#
# ================================================================================

# ROOT LOGGER
# Production should be less verbose - only warnings and errors
root=WARN

# ================================================================================
# APPLICATION HIERARCHY (app.*)
# ================================================================================

# --- UI Layer (app.ui.*) ---
# UI errors only in production
app.ui.*=ERROR

# --- Business Layer (app.business.*) ---
# Business logic needs INFO for audit trail
app.business.*=INFO

# Order processor is critical - keep DEBUG for troubleshooting
app.business.orderprocessor=DEBUG

# --- Database Layer (app.database.*) ---
# Database errors only
app.database.*=ERROR

# But connection issues need INFO for monitoring
app.database.connection=INFO

# Repositories at WARN (log unusual situations)
app.database.repository.*=WARN

# ================================================================================
# DATA PROCESSOR LIBRARY (dataprocessor.*) - FROM BPL
# ================================================================================

# All DataProcessor components at WARN (library code)
dataprocessor.*=WARN

# Validation failures need INFO (data quality issues)
dataprocessor.validation=INFO

# Transform layer errors only
dataprocessor.transform.*=ERROR

# Export operations at WARN (log export failures)
dataprocessor.export.*=WARN

# ================================================================================
# PRODUCTION MONITORING
# ================================================================================
# The configuration above ensures:
#   1. Critical business operations are logged (INFO/DEBUG)
#   2. Errors are always captured (ERROR level)
#   3. Performance impact is minimal (no TRACE, limited DEBUG)
#   4. Audit trail for important actions (business layer = INFO)
#
# RESOLUTION IN PRODUCTION:
#
# Logger name                           | Resolved level | Purpose
# --------------------------------------|----------------|--------------------------------
# app.ui.*                              | ERROR          | UI errors only
# app.business.orderprocessor           | DEBUG          | Critical business logic
# app.business.paymentprocessor         | INFO           | Business audit trail
# app.database.connection               | INFO           | Connection monitoring
# app.database.repository.orders        | WARN           | Repository warnings
# dataprocessor.validation              | INFO           | Data quality issues
# dataprocessor.transform.*             | ERROR          | Transform failures
# dataprocessor.export.*                | WARN           | Export warnings
# any.other.logger                      | WARN           | Root fallback
#
# ================================================================================
# SWITCHING CONFIGURATIONS
# ================================================================================
# The logging framework automatically loads:
#   - DEBUG builds: logging-debug.properties
#   - RELEASE builds: logging.properties
#
# You can also switch at runtime:
#   TLoggerFactory.LoadConfig('custom-config.properties');
#
# Or change individual loggers programmatically:
#   TLoggerFactory.SetLoggerLevel('app.database.*', llDEBUG);
#
# ================================================================================
